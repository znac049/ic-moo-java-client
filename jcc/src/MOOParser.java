/* Generated By:JavaCC: Do not edit this line. MOOParser.java */
//package uk.org.wookey.IC.parser;

public class MOOParser implements MOOParserConstants {
  public static void main(String args []) throws ParseException
  {
    String filename = "sample.moo";
    MOOParser parser;
    long startTime = 0;
    long stopTime = 0;
    long initTime = 0;

    System.out.println("MOO Parser:  Reading from file " + filename + " . . .");
    try {
      startTime = System.currentTimeMillis();
      parser = new MOOParser(new java.io.FileInputStream(filename));
      stopTime = System.currentTimeMillis();
      initTime = stopTime - startTime;
      parser.program();
    } catch (java.io.FileNotFoundException e) {
      System.out.println("MOO Parser:  File " + filename + " not found.");
      return;
    }
    System.out.println("MOO code parsed OK");
  }

/*
 * Start of grammar
 */
  final public void program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case FORK:
      case BREAK:
      case CONTINUE:
      case TRY:
      case MINUS:
      case LPAREN:
      case SEMICOLON:
      case INTEGER:
      case FLOAT:
      case OBJREF:
      case IDENT:
      case STRING:
      case 68:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Statement();
    }
    jj_consume_token(0);
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      IfStatement();
      break;
    case FOR:
      ForStatement();
      break;
    case WHILE:
      WhileStatement();
      break;
    case FORK:
      ForkStatement();
      break;
    case TRY:
      TryStatement();
      break;
    case BREAK:
      BreakStatement();
      break;
    case CONTINUE:
      ContinueStatement();
      break;
    case MINUS:
    case LPAREN:
    case INTEGER:
    case FLOAT:
    case OBJREF:
    case IDENT:
    case STRING:
    case 68:
      Expression();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case FORK:
      case BREAK:
      case CONTINUE:
      case TRY:
      case MINUS:
      case LPAREN:
      case SEMICOLON:
      case INTEGER:
      case FLOAT:
      case OBJREF:
      case IDENT:
      case STRING:
      case 68:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      Statement();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSEIF:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(ELSEIF);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case FORK:
        case BREAK:
        case CONTINUE:
        case TRY:
        case MINUS:
        case LPAREN:
        case SEMICOLON:
        case INTEGER:
        case FLOAT:
        case OBJREF:
        case IDENT:
        case STRING:
        case 68:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        Statement();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case FORK:
        case BREAK:
        case CONTINUE:
        case TRY:
        case MINUS:
        case LPAREN:
        case SEMICOLON:
        case INTEGER:
        case FLOAT:
        case OBJREF:
        case IDENT:
        case STRING:
        case 68:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        Statement();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
  }

  final public void ForStatement() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(IDENT);
    jj_consume_token(IN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
    case LSQUARE:
      jj_consume_token(LSQUARE);
      Expression();
      jj_consume_token(TO);
      Expression();
      jj_consume_token(RSQUARE);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case FORK:
      case BREAK:
      case CONTINUE:
      case TRY:
      case MINUS:
      case LPAREN:
      case SEMICOLON:
      case INTEGER:
      case FLOAT:
      case OBJREF:
      case IDENT:
      case STRING:
      case 68:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      Statement();
    }
    jj_consume_token(ENDFOR);
  }

  final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case FORK:
      case BREAK:
      case CONTINUE:
      case TRY:
      case MINUS:
      case LPAREN:
      case SEMICOLON:
      case INTEGER:
      case FLOAT:
      case OBJREF:
      case IDENT:
      case STRING:
      case 68:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_7;
      }
      Statement();
    }
    jj_consume_token(ENDWHILE);
  }

  final public void ForkStatement() throws ParseException {
    jj_consume_token(FORK);
    Expression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case FORK:
      case BREAK:
      case CONTINUE:
      case TRY:
      case MINUS:
      case LPAREN:
      case SEMICOLON:
      case INTEGER:
      case FLOAT:
      case OBJREF:
      case IDENT:
      case STRING:
      case 68:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_8;
      }
      Statement();
    }
    jj_consume_token(ENDFORK);
  }

  final public void TryStatement() throws ParseException {
    jj_consume_token(TRY);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case FOR:
      case WHILE:
      case FORK:
      case BREAK:
      case CONTINUE:
      case TRY:
      case MINUS:
      case LPAREN:
      case SEMICOLON:
      case INTEGER:
      case FLOAT:
      case OBJREF:
      case IDENT:
      case STRING:
      case 68:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_9;
      }
      Statement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      jj_consume_token(FINALLY);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case FORK:
        case BREAK:
        case CONTINUE:
        case TRY:
        case MINUS:
        case LPAREN:
        case SEMICOLON:
        case INTEGER:
        case FLOAT:
        case OBJREF:
        case IDENT:
        case STRING:
        case 68:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_10;
        }
        Statement();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXCEPT:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_11;
        }
        jj_consume_token(EXCEPT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          jj_consume_token(IDENT);
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        jj_consume_token(LPAREN);
        Codes();
        jj_consume_token(RPAREN);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case FOR:
          case WHILE:
          case FORK:
          case BREAK:
          case CONTINUE:
          case TRY:
          case MINUS:
          case LPAREN:
          case SEMICOLON:
          case INTEGER:
          case FLOAT:
          case OBJREF:
          case IDENT:
          case STRING:
          case 68:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_12;
          }
          Statement();
        }
      }
    }
    jj_consume_token(ENDTRY);
  }

  final public void BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
    if (jj_2_1(2)) {
      jj_consume_token(IDENT);
    } else {
      ;
    }
  }

  final public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE);
    if (jj_2_2(2)) {
      jj_consume_token(IDENT);
    } else {
      ;
    }
  }

  final public void Expression() throws ParseException {
    SimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPERATOR:
    case BECOMES:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR:
        jj_consume_token(OPERATOR);
        SimpleExpression();
        break;
      case BECOMES:
        jj_consume_token(BECOMES);
        Expression();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  final public void SimpleExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case IDENT:
      jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case COLON:
      case 67:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MINUS:
          case LPAREN:
          case INTEGER:
          case FLOAT:
          case OBJREF:
          case IDENT:
          case STRING:
          case 68:
            SimpleExpression();
            label_13:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[19] = jj_gen;
                break label_13;
              }
              jj_consume_token(COMMA);
              SimpleExpression();
            }
            break;
          default:
            jj_la1[20] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
          break;
        case COLON:
          jj_consume_token(COLON);
          jj_consume_token(IDENT);
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MINUS:
          case LPAREN:
          case INTEGER:
          case FLOAT:
          case OBJREF:
          case IDENT:
          case STRING:
          case 68:
            SimpleExpression();
            label_14:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[21] = jj_gen;
                break label_14;
              }
              jj_consume_token(COMMA);
              SimpleExpression();
            }
            break;
          default:
            jj_la1[22] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
          break;
        case 67:
          jj_consume_token(67);
          jj_consume_token(IDENT);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      break;
    case OBJREF:
      jj_consume_token(OBJREF);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
      case 67:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          jj_consume_token(COLON);
          jj_consume_token(IDENT);
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MINUS:
          case LPAREN:
          case INTEGER:
          case FLOAT:
          case OBJREF:
          case IDENT:
          case STRING:
          case 68:
            SimpleExpression();
            label_15:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[25] = jj_gen;
                break label_15;
              }
              jj_consume_token(COMMA);
              SimpleExpression();
            }
            break;
          default:
            jj_la1[26] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
          break;
        case 67:
          jj_consume_token(67);
          jj_consume_token(IDENT);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      break;
    case 68:
      jj_consume_token(68);
      SimpleExpression();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      SimpleExpression();
      jj_consume_token(RPAREN);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      SimpleExpression();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Codes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case E_TYPE:
      jj_consume_token(E_TYPE);
      break;
    case E_DIV:
      jj_consume_token(E_DIV);
      break;
    case E_RANGE:
      jj_consume_token(E_RANGE);
      break;
    case E_INVARG:
      jj_consume_token(E_INVARG);
      break;
    case E_VERBNF:
      jj_consume_token(E_VERBNF);
      break;
    case E_PROPNF:
      jj_consume_token(E_PROPNF);
      break;
    case E_VARNF:
      jj_consume_token(E_VARNF);
      break;
    case E_PERM:
      jj_consume_token(E_PERM);
      break;
    case E_INVALID:
      jj_consume_token(E_INVALID);
      break;
    case E_MAXREC:
      jj_consume_token(E_MAXREC);
      break;
    case E_ALL:
      jj_consume_token(E_ALL);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_16;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case E_TYPE:
        jj_consume_token(E_TYPE);
        break;
      case E_DIV:
        jj_consume_token(E_DIV);
        break;
      case E_RANGE:
        jj_consume_token(E_RANGE);
        break;
      case E_INVARG:
        jj_consume_token(E_INVARG);
        break;
      case E_VERBNF:
        jj_consume_token(E_VERBNF);
        break;
      case E_PROPNF:
        jj_consume_token(E_PROPNF);
        break;
      case E_VARNF:
        jj_consume_token(E_VARNF);
        break;
      case E_PERM:
        jj_consume_token(E_PERM);
        break;
      case E_INVALID:
        jj_consume_token(E_INVALID);
        break;
      case E_MAXREC:
        jj_consume_token(E_MAXREC);
        break;
      case E_ALL:
        jj_consume_token(E_ALL);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_2() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MOOParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1426a220,0x1426a220,0x1426a220,0x40,0x1426a220,0x1426a220,0x80,0x50000000,0x1426a220,0x1426a220,0x1426a220,0x1426a220,0x1426a220,0x800000,0x0,0x1426a220,0x1000000,0x8000000,0x8000000,0x0,0x14000000,0x0,0x14000000,0x10000000,0x10000000,0x0,0x14000000,0x0,0x0,0x14000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x70000008,0x70000008,0x70000008,0x0,0x70000008,0x70000008,0x0,0x0,0x70000008,0x70000008,0x70000008,0x70000008,0x70000008,0x0,0x0,0x70000008,0x0,0x10,0x10,0x4,0x70000000,0x4,0x70000000,0x100,0x100,0x4,0x70000000,0x100,0x100,0x70000000,0x3ff8000,0x4,0x3ff8000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x16,0x16,0x16,0x0,0x16,0x16,0x0,0x0,0x16,0x16,0x16,0x16,0x16,0x0,0x2,0x16,0x0,0x0,0x0,0x0,0x16,0x0,0x16,0x8,0x8,0x0,0x16,0x8,0x8,0x16,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MOOParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MOOParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MOOParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MOOParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MOOParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MOOParser(MOOParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MOOParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[69];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 69; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
